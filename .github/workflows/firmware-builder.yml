name: Test Build

on:
  workflow_dispatch:

jobs:
  build:
    name: Build firmware for bcm53xx/generic
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt -y purge azure-cli dotnet* firefox ghc* google* llvm* mono* mysql* openjdk* php* zulu* powershell* msodbc* android*
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -y update
          sudo -E apt -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 flex uglifyjs gcc g++ gcc-multilib g++-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils libelf-dev autoconf automake libtool autopoint curl wget python3 python3-pip python3-ply device-tree-compiler scons gperf sshpass rsync
          sudo -E pip3 install -U python-telegram-bot
          sudo -E apt -y clean
      - name: Checkout local source tree
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set target info
        run: |
          BUILDBOT_TARGET=bcm53xx
          BUILDBOT_SUBTARGET=generic
          echo -e "BUILDBOT_TARGET=$BUILDBOT_TARGET" | tee -a "$GITHUB_ENV"
          echo -e "BUILDBOT_SUBTARGET=$BUILDBOT_SUBTARGET" | tee -a "$GITHUB_ENV"
      - name: Pull feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Config buildroot
        run: |
          echo -e "CONFIG_TARGET_${BUILDBOT_TARGET}=y" | tee ".config"
          echo -e "CONFIG_TARGET_${BUILDBOT_TARGET}_${BUILDBOT_SUBTARGET}=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_MULTI_PROFILE=y" | tee -a ".config"
          echo -e "CONFIG_ALL_KMODS=y" | tee -a ".config"
          echo -e "CONFIG_ALL_NONSHARED=y" | tee -a ".config"
          echo -e "CONFIG_DEVEL=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_PER_DEVICE_ROOTFS=y" | tee -a ".config"
          echo -e "CONFIG_AUTOREMOVE=y" | tee -a ".config"
          echo -e "CONFIG_BUILDBOT=y" | tee -a ".config"
          echo -e "CONFIG_BUILD_LOG=y" | tee -a ".config"
          echo -e "CONFIG_COLLECT_KERNEL_DEBUG=y" | tee -a ".config"
          echo -e "CONFIG_IB=y" | tee -a ".config"
          echo -e "CONFIG_MAKE_TOOLCHAIN=y" | tee -a ".config"
          echo -e "CONFIG_SDK=y" | tee -a ".config"
          echo -e "CONFIG_REPRODUCIBLE_DEBUG_INFO=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_ALL_PROFILES=y" | tee -a ".config"
          make defconfig
      - name: Build tools
        run: |
          make tools/install -j$(nproc) || make tools/install V=s
      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) || make toolchain/install V=s
      - name: Build target
        run: |
          make target/compile -j$(nproc) IGNORE_ERRORS=1 || \
            make target/compile IGNORE_ERRORS=1 V=s
      - name: Build packages
        run: |
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || \
            make package/compile IGNORE_ERRORS=1 V=s
          make package/install -j$(nproc) || make package/install V=s
          make package/index V=s
      - name: Build firmware
        run: |
          make target/install -j$(nproc) || make target/install V=s
      - name: Generate buildinfo
        run: |
          make buildinfo V=s
      - name: Generate JSON overview
        run: |
          make json_overview_image_info V=s
      - name: Generate HASH
        run: |
          make checksum V=s
      - name: Print faillogs
        run: |
          [ ! -e "./logs/error.txt" ] || cat "./logs/error.txt"
          [ ! -e "./logs/package/error.txt" ] || cat "./logs/package/error.txt"
      - name: Upload logs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILDBOT_TARGET }}-${{ env.BUILDBOT_SUBTARGET }}-logs
          path: 'logs/'

      - name: Upload firmware
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILDBOT_TARGET }}-${{ env.BUILDBOT_SUBTARGET }}-firmware
          path: 'bin/targets/'

      - name: Cleanup buildroot
        if: ${{ always() }}
        run: |
          make distclean V=s
