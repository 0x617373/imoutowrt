From 5ea108dee75176512a9f184318f8ad936e3c5c62 Mon Sep 17 00:00:00 2001
From: Yousong Zhou <yszhou4tech@gmail.com>
Date: Tue, 11 Aug 2020 16:07:35 +0800
Subject: [PATCH] Integrate vpaes_ctr32_encrypt_blocks into crypto

Adapted from https://github.com/openssl/openssl/pull/9677/commits/2807606334b08b3df58f0bc0443f53ad649e9adc.patch
---
 crypto/evp/e_aes.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/crypto/evp/e_aes.c b/crypto/evp/e_aes.c
index a1b7d50bbf..dde46c741e 100644
--- a/crypto/evp/e_aes.c
+++ b/crypto/evp/e_aes.c
@@ -115,6 +115,14 @@ void vpaes_cbc_encrypt(const unsigned char *in,
                        unsigned char *out,
                        size_t length,
                        const AES_KEY *key, unsigned char *ivec, int enc);
+#  if defined(__x86_64) || defined(__x86_64__) \
+      || defined(_M_AMD64) || defined(_M_X64)
+void vpaes_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
+                                size_t len, const AES_KEY *key,
+                                const unsigned char ivec[16]);
+#  else
+#   define vpaes_ctr32_encrypt_blocks NULL
+#  endif
 #endif
 #ifdef BSAES_ASM
 void bsaes_cbc_encrypt(const unsigned char *in, unsigned char *out,
@@ -2641,8 +2649,12 @@ static int aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                         EVP_CIPHER_CTX_key_length(ctx) * 8,
                                         &dat->ks.ks);
             dat->block = (block128_f) vpaes_decrypt;
-            dat->stream.cbc = mode == EVP_CIPH_CBC_MODE ?
-                (cbc128_f) vpaes_cbc_encrypt : NULL;
+        dat->stream.cbc = NULL;
+        if (mode == EVP_CIPH_CBC_MODE)
+            dat->stream.cbc = (cbc128_f) vpaes_cbc_encrypt;
+        else
+        if (mode == EVP_CIPH_CTR_MODE)
+            dat->stream.ctr = (ctr128_f) vpaes_ctr32_encrypt_blocks;
         } else
 #endif
         {
@@ -3029,7 +3041,7 @@ static int aes_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                 vpaes_set_encrypt_key(key, ctx->key_len * 8, &gctx->ks.ks);
                 CRYPTO_gcm128_init(&gctx->gcm, &gctx->ks,
                                    (block128_f) vpaes_encrypt);
-                gctx->ctr = NULL;
+                gctx->ctr = (ctr128_f) vpaes_ctr32_encrypt_blocks;
                 break;
             } else
 #endif
